# 面试题笔记

### OC 基础

* **1. 请说明并比较以下关键词：strong, weak, assign, copy**
  @property 是 OC 中用于声明属性的常用写法, 可以通过关键字来指定属性 内存管理, 原子性, 读写权限等; 
  Strong: 会对属性进行强引用该实例 相当于拥有此实例, 使实例引用计数器 +1. 一般用于 OC 对象需要引用的实例变量; 
  weak: 会指向该实例不拥有此实例, 跟 strong 区别在于, 不会导致其引用计数器 +1. 相当于弱引用, 并且此实例 无任何引用时, 系统会自动将其  nil. 
  assign: assign 主要用于修饰 基本数据类型, 非 OC 对象时可以使用其修饰,  引用计数器不会产生变化;  这些数据类型保存在栈, 系统管理其内存; 
  copy: 与 strong 类似, 主要用于管理 不可变对象, 如果使用 strong 原理是多个复制多个指针指向同一个地址, copy 则会拷贝一份对象, 新的指向指向这个新对象的地址;
  nonatomic: 非原子性, 这个是系统默认使用的修饰关键字, 其 set get 方法会少一个 锁, 读写时性能要高与 atomic; 
  atomic: 原子性, 但是并不是真正的线程安全的; 在多线程同时访问时, 无法确保准确; 会影响到性能;  一般默认使用 nonatomic 如果想要实现真正的线程安全 需要在 set get 方法上使用 锁;
  readonly: 
  readwrite:
  
  **延伸问题: 如何实现 真正的原子性, 使变量能在多线程环境下读写安全**
  
* **2. 请说明并比较以下关键词：__weak，__block**    
  __weak 与 @property 使用 weak 修饰实例的实现原理相似; 
  __weak 主要用于修饰变量, 防止在 block 内部循环引用; 
  __block 主要用于修饰变量, 使其在 block 内进行动态更改, 由于 block 异常捕获的机制, 在内部实现会先将外部变量进行捕获, 如果在内部想要修改外部变量, 则需要使用 关键字进行修饰变量, 否则无法通过编译; 
  
  **延伸问题: weak 实现原理, __block 内部实现原理,block 是如何捕获外部变量的**
  
  * **3. 请说明并比较以下关键词：atomatic, nonatomic**

  atomic修饰的对象会保证setter和getter的完整性，任何线程对其访问都可以得到一个完整的初始化后的对象。因为要保证操作完成，所以速度慢。它比nonatomic安全，但也并不是绝对的线程安全，例如多个线程同时调用set和get就会导致获得的对象值不一样。绝对的线程安全就要用关键词synchronized。
  
nonatomic修饰的对象不保证setter和getter的完整性，所以多个线程对它进行访问，它可能会返回未初始化的对象。正因为如此，它比atomic快，但也是线程不安全的。

**延伸: synchronized 使用**

* **4. 什么是ARC？**  
  
  全称: Automatic Reference Counting, 自动管理引用计数器. 主要系统在编译器层面上自动加入 retain/ release. 不需要再人为的方式进行管理 引用计数器; 
  
  ARC 主要是为了解决原来手动内存管理 MRC 的问题, 由于需要手写 retain 然后释放时 release 掉, 内存管理成了开发经常遇到的难题, 所以推出 ARC 之后, 系统自动在相应的地方自动进行内存管理,相对 MRC 要方便很多;
  
  但是在有些地方系统并不能完全解决掉内存泄漏的问题, 比如出现 循环引用
  
  * **5. 什么情况下会出现循环引用**

  * **6. 下面代码中有什么bug？**  

``` - (void)viewDidLoad {
  UILabel *alertLabel = [[UILabel alloc] initWithFrame:CGRectMake(100,100,100,100)];
  alertLabel.text = @"Wait 4 seconds...";
  [self.view addSubview:alertLabel];

  NSOperationQueue *backgroundQueue = [[NSOperationQueue alloc] init];
  [backgroundQueue addOperationWithBlock:^{
    [NSThread sleepUntilDate:[NSDate dateWithTimeIntervalSinceNow:4]];
    alertLabel.text = @"Ready to go!”
  }];
} 
```
**UI 相关更新只能在主线程进行操作; 参考: [UIKit 线程安全](https://juejin.im/post/5c406d97e51d4552475fe178)
1. 读写安全问题. 如果在 UI 相关属性读写上加上锁, 则会影响性能; 
2. UIApplication 在主线程初始化, 所有用户事件响应, 点击 拖拽等都在主线程处理, 如果 View 也只能放到主线程, 与其保持同步;
3. 渲染层面问题, 异步无法确定处理过程与 FPS 保持同步;**

* 1. 一个NSObject对象占用多少内存？
    1. 系统通过  malloc_size 函数分配 16 个字节给 NSObject 对象;
    2. NSObject 对象内部只是用 8 个字节;

* 2. 对象的isa指针指向哪里？
    
    OC 万物接对象,所有对象内部都会包含一个  isa 指针;
    1. isa 指针会指向 instance 本类 Class;
    2. Class 实际也是一个对象,其 isa 指针会指向 meta-class 对象, 其父类实例对象;
    3. meta-class 也是会先指向其 Class; 最终会指向基类 NSObject; 
    4. NSObject 的 isa 指针会指向自己本身; 形成闭环;

* 3. OC的类信息存放在哪里？
    类信息包含: 静态方法, 实例方法, 属性, 协议信息, 通通存放在 Class 对象中;
    * 类方法存放于 meta-class;
    * 成员变量具体值存放于 instance 对象;

* 4.iOS用什么方式实现对一个对象的KVO？(KVO的本质是什么？)

    iOS 是通过 runtime 动态运行采用 里氏替换模式实现; 
    1. 一般先通过调用 addObserver: keyPath: options: context  传入观察对象, 观察 key:, 观察变化方式, 上下文;
    2. 实现观察通知回调; 
    3. 系统在运行时, 会对被观察对象进行替换, 比如我们对 NSObject 对象进行观察, 则会在运行时 生成一个新对象(NSKVONotifying_NSObject), 然后将原对象 isa 指针指向其. 然后系统还会重写其 set 方法, 在设置和设置完成, 添加通知方法; 但是此时如果我们创建一个新的名为“NSKVONotifying_A”的类(),就会发现系统运行到注册KVO的那段代码时程序就崩溃,因为系统在注册监听的时候动态创建了名为NSKVONotifying_A的中间类,并指向这个中间类了。
    4. willChangeValueForKey:  didChangeValueForKey:  最终触发 observeValueForKeyPath:ofObject:change:context:）回调; 

* 5.如何手动触发KVO？
  手动调用  willChangeValueForKey:  didChangeValueForKey: 方法;
  
  * 6. 直接修改成员变量或属性会触发KVO么？
      
    通过 KVC 进行修改会触发, 因为 KVC 实际会调用 set 方法; 
    直接通过 _xx 方式不会触发;
    
* 7.KVC的赋值和取值过程是怎样的？原理是什么？
    调用 KVO 过程
    1. 系统先到 instance 查找, 是否有 _key, 如果有则直接调用其 set  get 方法;
    2. 如果没有  _key,  查找是否包含同名 key, 如果有则直接调用;
    3. 如果没有同名 key 则会查找是否有 同名 key 实例变量, 有则调用;
    4. 如果这几个都没有则会进行方法转发流程, 最终如果没有做异常捕获, 则 crash;
    
* 8. Category的实现原理？
    
    
* 1. Category和Class Extension的区别是什么？
    
    两个都是给本类 添加属性, 方法, 协议的特性; 
    实现区别:
    1. 分类在运行时决议, Extension 在编译器决议, 所以 Extension 可以随意的添加实例变量;
    2. 延展需要再拿到本类源代码情况下进行编写, Category 可以在没有本类情况下即可实现, 例如我们可以给系统实现的框架直接使用 Category 的方式添加一些方法;

* 10.Category中有load方法吗？load方法是什么时候调用的？load 方法能继承吗？
    
    有 load 方法, 是在运行时加载的; 不像其他类里面的 load, 会在编译期间调用;
    可以继承
    
* 11. +load、+initialize方法的区别什么？它们在category中的调用的顺序？以及出现继承时他们之间的调用过程？
    
    
    + load 只会调用一次, +initialize 有时候可能会多次调用, 比如子类没有实现时, 会调用父类的;
    +load 会在类的编译期间自动调用; 
    +initialize 会在类第一次收到消息时自动调用, 类似延时加载, 如果此类从未使用过,则永远不会调用;
    调用顺序可以在 Xcode 里面设置文件的编译顺序进行调整;
1、先调用类的+load
√ 按照编译先后顺序调用（先编译，先调用）
√ 调用子类的+load之前会先调用父类的+load
2、再调用分类的+load
√ 按照编译先后顺序调用（先编译，先调用）

* 12、Category能否添加成员变量？如果可以，如何给Category添加成员变量？

  不能像 .h .m  或者延展一样那种方式使用 @property 的方式进行添加, 可以通过 runtime 的关联对象实现; 
  因为 Category 是在运行期间决议, 但是类的决议是在编译期, 其实例变量, 方法, 协议等 都已经确定下来, 如果在运行期间随意更改, 则会严重破坏内存管理;
  关联对象实际上就是一个表示此类的全局容器, 当调用到 分类里面声明的 属性时, 则会使用 key 去容器中查找是否包含这个实例;
  
* 13. block的原理是怎样的？本质是什么？
  
* 14. __block的作用是什么？
  
  用于修饰变量, 使其在 block 内部中可以动态修改; 
  编译器会将__block变量包装成一个对象
  __block不能修饰全局变量、静态变量（static）
  __block说明符类似static、auto、register一样,只要观察到该变量被 block 所持有，就将“外部变量”在栈中的内存地址放到了堆中。 进而在block内部也可以修改外部变量的值。
  
* 15. block的属性修饰词为什么是copy？使用block有哪些使用注意？
  
  由于 iOS 历史原因使用 MRC, 当时的 block 一般使用 copy 来修饰,  这样我们生成的 block 会又栈拷贝到堆上, 但是在系统的升级之后, 实际上拷贝系统已经默认帮我们实现了;  些 copy strong 都不会有什么问题;  但是为了让代码更易于阅读, 让后者在写到这段代码的时候能知道其背后的原因, 使用 copy 相对来说更好一些;
    
    
  
  
  


